/** THIS IS AN AUTOMATICALLY GENERATED FILE.  DO NOT MODIFY
 * BY HAND!!
 *
 * Generated by lcm-gen
 **/

#include <lcm/lcm_coretypes.h>

#ifndef __robot_control_t_hpp__
#define __robot_control_t_hpp__

#include <vector>
#include <string>


class robot_control_t
{
    public:
        int64_t    utime;
        int8_t     commandid;
        int8_t     robotid;
        int8_t     ndparams;
        std::vector< double > dparams;
        int8_t     niparams;
        std::vector< int8_t > iparams;
        int8_t     nsparams;
        std::vector< std::string > sparams;
        int64_t    nbparams;
        std::vector< uint8_t > bparams;

    public:
        inline int encode(void *buf, int offset, int maxlen) const;
        inline int getEncodedSize() const;
        inline int decode(const void *buf, int offset, int maxlen);
        inline static int64_t getHash();
        inline static const char* getTypeName();

        // LCM support functions. Users should not call these
        inline int _encodeNoHash(void *buf, int offset, int maxlen) const;
        inline int _getEncodedSizeNoHash() const;
        inline int _decodeNoHash(const void *buf, int offset, int maxlen);
        inline static int64_t _computeHash(const __lcm_hash_ptr *p);
};

int robot_control_t::encode(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;
    int64_t hash = getHash();

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &hash, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = this->_encodeNoHash(buf, offset + pos, maxlen - pos);
    if (tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robot_control_t::decode(const void *buf, int offset, int maxlen)
{
    int pos = 0, thislen;

    int64_t msg_hash;
    thislen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &msg_hash, 1);
    if (thislen < 0) return thislen; else pos += thislen;
    if (msg_hash != getHash()) return -1;

    thislen = this->_decodeNoHash(buf, offset + pos, maxlen - pos);
    if (thislen < 0) return thislen; else pos += thislen;

    return pos;
}

int robot_control_t::getEncodedSize() const
{
    return 8 + _getEncodedSizeNoHash();
}

int64_t robot_control_t::getHash()
{
    static int64_t hash = _computeHash(NULL);
    return hash;
}

const char* robot_control_t::getTypeName()
{
    return "robot_control_t";
}

int robot_control_t::_encodeNoHash(void *buf, int offset, int maxlen) const
{
    int pos = 0, tlen;

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->commandid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->robotid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->ndparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __double_encode_array(buf, offset + pos, maxlen - pos, &this->dparams[0], this->ndparams);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->niparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->iparams[0], this->niparams);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_encode_array(buf, offset + pos, maxlen - pos, &this->nsparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    for (int a0 = 0; a0 < this->nsparams; a0++) {
        char* __cstr = (char*) this->sparams[a0].c_str();
        tlen = __string_encode_array(buf, offset + pos, maxlen - pos, &__cstr, 1);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int64_t_encode_array(buf, offset + pos, maxlen - pos, &this->nbparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __byte_encode_array(buf, offset + pos, maxlen - pos, &this->bparams[0], this->nbparams);
    if(tlen < 0) return tlen; else pos += tlen;

    return pos;
}

int robot_control_t::_decodeNoHash(const void *buf, int offset, int maxlen)
{
    int pos = 0, tlen;

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->utime, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->commandid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->robotid, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->ndparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->dparams.resize(this->ndparams);
    if(this->ndparams) {
        tlen = __double_decode_array(buf, offset + pos, maxlen - pos, &this->dparams[0], this->ndparams);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->niparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->iparams.resize(this->niparams);
    if(this->niparams) {
        tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->iparams[0], this->niparams);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    tlen = __int8_t_decode_array(buf, offset + pos, maxlen - pos, &this->nsparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->sparams.resize(this->nsparams);
    for (int a0 = 0; a0 < this->nsparams; a0++) {
        int32_t __elem_len;
        tlen = __int32_t_decode_array(buf, offset + pos, maxlen - pos, &__elem_len, 1);
        if(tlen < 0) return tlen; else pos += tlen;
        if(__elem_len > maxlen - pos) return -1;
        this->sparams[a0].assign(((const char*)buf) + offset + pos, __elem_len -  1);
        pos += __elem_len;
    }

    tlen = __int64_t_decode_array(buf, offset + pos, maxlen - pos, &this->nbparams, 1);
    if(tlen < 0) return tlen; else pos += tlen;

    this->bparams.resize(this->nbparams);
    if(this->nbparams) {
        tlen = __byte_decode_array(buf, offset + pos, maxlen - pos, &this->bparams[0], this->nbparams);
        if(tlen < 0) return tlen; else pos += tlen;
    }

    return pos;
}

int robot_control_t::_getEncodedSizeNoHash() const
{
    int enc_size = 0;
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __double_encoded_array_size(NULL, this->ndparams);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    enc_size += __int8_t_encoded_array_size(NULL, this->niparams);
    enc_size += __int8_t_encoded_array_size(NULL, 1);
    for (int a0 = 0; a0 < this->nsparams; a0++) {
        enc_size += this->sparams[a0].size() + 4 + 1;
    }
    enc_size += __int64_t_encoded_array_size(NULL, 1);
    enc_size += __byte_encoded_array_size(NULL, this->nbparams);
    return enc_size;
}

int64_t robot_control_t::_computeHash(const __lcm_hash_ptr *)
{
    int64_t hash = 0x38f63251f9863f70LL;
    return (hash<<1) + ((hash>>63)&1);
}

#endif
